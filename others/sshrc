# ALIASES
#!/usr/bin/env zsh

## Global aliases only works with ZSH
if [[ "$0" =~ 'zsh' ]]; then
    # Global directories aliases
    alias -g ..='..'
    alias -g ...='../..'
    alias -g ....='../../..'
    alias -g .....='../../../..'
    alias -g ......='../../../../..'
    alias -g .......='../../../../../..'

    # Global commands aliases
    alias -g X='| xargs'
    alias -g G='| grep'
    alias -g N='| grep -v'
    alias -g E='| grep-passthru'
    if [[ "$OSTYPE" == "darwin"* ]]; then
        alias -g CC='| pbcopy'
    else
        alias -g CC='| xclip -selection clipboard'
    fi
    alias -g XS='| xargs subl'
    alias -g HR='| highlight red'
    alias -g HG='| highlight green'
    alias -g HB='| highlight blue'
    alias -g HM='| highlight magenta'
    alias -g HC='| highlight cyan'
    alias -g HY='| highlight yellow'
    alias -g C='| wc -l'
    alias -g S='| sort'
    alias -g H='| head'
    alias -g L="| less"
    alias -g T='| tail'
else
    # Directories aliases
    alias ..='cd ..'
    alias ...='cd ../..'
    alias ....='cd ../../..'
    alias .....='cd ../../../..'
    alias ......='cd ../../../../..'
    alias .......='cd ../../../../../..'
fi

# Aliases only for non root users
alias apt-installed="aptitude search '~i!~M'"
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias sudo='sudo ' ## Allow aliases to be sudo’ed
    alias watch='watch ' ## Allow aliases to be watched
    alias halt="osascript -e 'tell app \"System Events\" to shut down'"
    alias reboot="osascript -e 'tell app \"System Events\" to restart'"
    alias agall='brew update ; brew upgrade ; brew prune ; brew cleanup ; brew doctor'
    alias brewall='brew update ; brew upgrade ; brew prune ; brew cleanup ; brew doctor'
elif [[ $UID != 0 || $EUID != 0 ]]; then
    alias sudo='sudo ' ## Allow aliases to be sudo’ed
    alias watch='watch ' ## Allow aliases to be watched
    alias apt='sudo apt-get'
    alias agi='sudo apt-get install'
    alias agr='sudo apt-get remove'
    alias agu='sudo apt-get update'
    alias agg='sudo apt-get upgrade'
    alias ags='sudo apt-cache search'
    alias agall='sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get -y dist-upgrade && sudo apt-get -y autoremove'
else
    alias apt='apt-get'
    alias agi='apt-get install'
    alias agr='apt-get remove'
    alias agu='apt-get update'
    alias agg='apt-get upgrade'
    alias ags='apt-cache search'
    alias agall='apt-get update && apt-get -y upgrade && apt-get -y dist-upgrade && apt-get -y autoremove'
fi

# Use GNU tools instead of bsd ones
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias ls='\gls --color=auto'
    alias awk='\gawk'
    alias sed='\gsed'
    alias grep='\ggrep'
fi

# Directories working
alias pwd=' pwd'
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias pwdc=' pwd | tr -d "\n" | pbcopy'
else
    alias pwdc=' pwd | tr -d "\n" | xclip -selection clipboard'
fi
alias cd=' cd'
alias cdg=' cd "$(git rev-parse --show-toplevel)"' ## git root
alias -- -=' cd -'
alias 1=' cd -'
alias 2=' cd -2'
alias 3=' cd -3'
alias 4=' cd -4'
alias 5=' cd -5'
alias 6=' cd -6'
alias 7=' cd -7'
alias 8=' cd -8'
alias 9=' cd -9'

alias l='ls -lh --group-directories-first'
alias ll='ls -lhA --group-directories-first'
alias llm='ls -lhAt --group-directories-first' ## "m" for sort by last modified date
alias llc='ls -lhAU --group-directories-first' ## "c" for sort by creation date
alias lls='ls -lhAS --group-directories-first' ## "s" for sort by size
alias lla='ll-archive' ## "a" for archive

# 1 letter commands shortcuts
alias p=' dirs -v | head -10' ## most used dirs for current session
alias x=' exit'
alias h='history'
alias j='jobs'
alias t='tmux'
alias v='open-with-vim'
alias e='open-with-vim'
alias s='open-with-sublime-text'
alias a='open-with-atom'
alias n='nano'
alias g='git'
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias c=" clear && printf '\e[3J'"
    alias o='open'
else
    alias c=" clear && echo -ne '\033c'"
    alias o='xdg-open 2>/dev/null'
fi

# Others commands shortcuts
alias zd='z --del'
alias k9='kill -9'
alias rd='rmdir'
alias md='mkdir -p'
alias mcd='mkdir-cd'
alias mkcd='mkdir-cd'
alias trm='trash-put'
alias rmf="rm -rf"
alias rmrf="rm -rf"
alias rmds="find . -type f -name '*.DS_Store' -ls -delete"
alias cpr="cp -r"
alias bak='backup-file'
alias psy='psysh'
alias tailf='tail -f'
alias less='less -r'
alias whence='type -a'
alias whereis='whereis'
alias grep='grep --color=auto'
alias vgrep='grep -v --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias zshrc='source ~/.zshrc' ## Reload config
alias snippets="cat ${DOTFILES_PATH}/zsh/snippets.zsh | sed -r 's/^function //g' | sed -r 's/^# (.*)/\x1b[32m\x1b[1m# \1\x1b[0m/'"

# System stats
alias free='free -h'
alias ps='ps auxf'
alias iotop='iotop -Poa' ## iotop with only processes using i/o + accumulated i/o
alias dmesg="dmesg -T|sed -e 's|\(^.*'`date +%Y`']\)\(.*\)|\x1b[0;34m\1\x1b[0m - \2|g'" ## dmesg with colored human-readable dates
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias df='gdf -h'
    alias du='gdu -h'
    alias du0='gdu --max-depth=0'
    alias du1='gdu --max-depth=1 | sort -k2' ## sort by name
    alias du1s='gdu --max-depth=1 | sort -h' ## sort by size
else
    alias df='df -h'
    alias du='du -h'
    alias du0='du --max-depth=0'
    alias du1='du --max-depth=1 | sort -k2' ## sort by name
    alias du1s='du --max-depth=1 | sort -h' ## sort by size
fi

# Search & find
alias sg='grep -rinw "." -e ' ## inside files
alias sa='ack -Hir' ## with ack
alias ss='sift -n' ## with sift
alias ff='find . -type f -iname ' ## insensitive filename

# Git
alias gcl='git clone --recursive'
alias gcf='git config'
alias gs='git status'
alias gst='git status-short'
alias ga='git add'
alias gaa='git add -A'
alias gl='git log'
alias gls='git log --stat' ## include which files were altered
alias glp='git log -p' ## display the full diff of each commit
alias gll='git pretty-log'
alias gbl='git blame -b -w'
alias gd='git diff'
alias gdw='git diff --word-diff'
alias gdt='git difftool -d'
alias gw='git whatchanged'
alias gg='git grep -n -C2 -E'
alias gc='git commit -v'
alias gc!='git commit -v --amend'
alias gcu='git reset --soft HEAD~' ## undo commit
alias gcm='git commit -m'
alias gca='git commit -a'
alias gcam='git commit -a -m'
alias gb='git branch'
alias gbm='git branch --merged'
alias gbr='git branch -r'
alias gbu='git remote update origin --prune' ## update remote list
alias gm='git merge'
alias gms='git merge --squash'
alias gmm='git merge -m'
alias gt='git tag'
alias gco='git checkout'
alias gf='git fetch'
alias gfo='git fetch origin'
alias gp='git pull'
alias gpull='git pull'
alias gpush='git push'
alias gpr='git pull --rebase'
alias gget='git get'
alias gput='git put'
alias ggp='git get-put'
alias grb='git rebase'
alias gss='git stash save'
alias gsa='git stash apply'
alias gsp='git stash pop'
alias gsl='git stash list'
alias ggc='git gc --aggressive'
alias cgd='cdiff -s -w 0' ## columned & colored git diff
alias cgs='columns-git-show' ## columned & colored git diff

# Docker
alias doi="docker images"
alias dov="docker volume"
alias doe="docker exec"
alias dok="docker kill"
alias dops="docker ps"
alias dorm="docker rm"
alias dormi="docker rmi"
alias dc="docker-compose"
alias dcc="./docker-compose-run-script.sh"
alias dcb="docker-compose build"
alias dcup="docker-compose up"
alias dcrm="docker-compose rm"
alias dcr="docker-compose run"
alias dcsa="docker-compose start"
alias dcso="docker-compose stop"
alias dsss="docker-sync-stack start"
alias dssc="docker-sync-stack clean"

# OS Specific
if [[ "$OSTYPE" == "darwin"* ]]; then
    # Show/hide hidden files in Finder
    alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
    alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"


    # Stuff I never really use but cannot delete either because of http://xkcd.com/530/
    alias stfu="osascript -e 'set volume output muted true'"

    # Kill all the tabs in Chrome to free up memory
    # [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
    alias chromekill="\ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"

    alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

    # Ignore macos files
    alias zip="zip -x *.DS_Store -x *__MACOSX* -x *.AppleDouble*"

    # Flush DNS
    alias flushdns="dscacheutil -flushcache && killall -HUP mDNSResponder"

    # Quick-Look preview files from the command line
    alias ql="qlmanage -p &>/dev/null"

    # Reload native apps
    alias killos="killfinder && killdock && killmenubar"
else
fi

# rsync
alias rsync-copy="rsync -av --progress -h --exclude-from=$HOME/.cvsignore"
alias rsync-move="rsync -av --progress -h --remove-source-files --exclude-from=$HOME/.cvsignore"
alias rsync-update="rsync -avu --progress -h --exclude-from=$HOME/.cvsignore"
alias rsync-synchronize="rsync -avu --delete --progress -h --exclude-from=$HOME/.cvsignore"

# Files permissions
alias 400='chmod 400 -R'
alias 600='chmod 600 -R'
alias 640='chmod 640 -R'
alias 644='chmod 644 -R'
alias 755='chmod 755 -R'
alias 775='chmod 775 -R'
alias 777='chmod 777 -R'
alias www="chown www-data:www-data * .* -R"
alias mx='chmod u+x'

# SSH helpers
alias tunnel='ssh -f -N' ## Create a tunnel
alias tunnel-mysql='ssh -f -N -L 3307:localhost:3306' ## Create a MySQL tunnel
alias tunnel-socks='ssh -f -N -D 8080' ## SOCKS proxy
alias tunnel-list='ps aux | grep "ssh -f -N" | grep -v "grep"' ## List tunnels
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias pubkey="more ~/.ssh/id_rsa.pub | pbcopy | echo '=> Public key copied to pasteboard'"
else
    alias pubkey="more ~/.ssh/id_rsa.pub | xclip | echo '=> Public key copied to pasteboard'"
fi

# Date & time helpers
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias cal='cal'
else
    alias cal='cal -3'
fi
alias week='date +%V'
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# Network & ISP tests
alias myip='dig +short myip.opendns.com @resolver1.opendns.com'
alias myips="ifconfig -a | grep -o 'inet6\? \(ad\?dr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:|adr:)? ?/, \"\"); print }' | grep -v '127.0.0.1' | grep -v '::1'"
alias localip="ifconfig | grep -Eo 'inet (addr:|adr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias speedtest="wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip"
alias ipstats="netstat -ntu | tail -n +3 | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -n"
alias ports="lsof -ni | grep LISTEN"
alias ns="nslookup"
alias he="sudo $EDITOR /etc/hosts"

for method in GET HEAD POST PUT DELETE PURGE TRACE OPTIONS; do
    alias "$method"="http '$method'"
done

# Curl & web helpers
alias dl='curl --continue-at - --location --progress-bar --remote-name --remote-time' ## download a file
alias weather='curl -A curl wttr.in'
alias wget-site='wget --mirror -p --convert-links -P'
alias header='curl-header'
alias purge='curl-purge'

# Online pastebins
alias sprunge="curl -F 'sprunge=<-' http://sprunge.us"
alias clbin="curl -F 'clbin=<-' https://clbin.com"

# Because Oo
alias utf8test="wget -qO- http://8n1.org/utf8" ## test terminal UTF8 capabilities

# Composer helpers
alias cu="composer update"
alias cr="composer require"
alias ci="composer install"
alias cda="composer dump-autoload"

# Laravel helpers
alias art='php artisan'
alias mig-install='php artisan migrate:install'
alias mig-seed='php artisan migrate:refresh --seed'



# FUNCTIONS
#!/usr/bin/env zsh

# List content of archive but don't extract
function ll-archive() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2|*.tbz2|*.tbz)  tar -jtf "$1"     ;;
            *.tar.gz)                tar -ztf "$1"     ;;
            *.tar|*.tgz|*.tar.xz)    tar -tf  "$1"     ;;
            *.gz)                    gzip -l  "$1"     ;;
            *.rar)                   rar vb   "$1"     ;;
            *.zip)                   unzip -l "$1"     ;;
            *.7z)                    7z l     "$1"     ;;
            *.lzo)                   lzop -l  "$1"     ;;
            *.xz|*.txz|*.lzma|*.tlz) xz -l    "$1"     ;;
        esac
    else
        echo "Sorry, '$1' is not a valid archive."
        echo "Valid archive types are:"
        echo "tar.bz2, tar.gz, tar.xz, tar, gz,"
        echo "tbz2, tbz, tgz, lzo, rar"
        echo "zip, 7z, xz and lzma"
    fi
}

# Extract an archive
function extract() {
    if [ -z "$2" ]; then 2="."; fi
    if [ -f "$1" ] ; then
        case "$1" in
            *.tar.bz2|*.tbz2|*.tbz)       mkdir -v "$2" 2>/dev/null ; tar xvjf "$1" -C "$2"  ;;
            *.tar.gz|*.tgz)               mkdir -v "$2" 2>/dev/null ; tar xvzf "$1" -C "$2"  ;;
            *.tar.xz)                     mkdir -v "$2" 2>/dev/null ; tar xvJf "$1"          ;;
            *.tar)                        mkdir -v "$2" 2>/dev/null ; tar xvf  "$1" -C "$2"  ;;
            *.rar)                        mkdir -v "$2" 2>/dev/null ; unrar x  "$1"          ;;
            *.zip)                        mkdir -v "$2" 2>/dev/null ; unzip    "$1" -d "$2"  ;;
            *.7z)                         mkdir -v "$2" 2>/dev/null ; 7z x     "$1" -o"$2"   ;;
            *.lzo)                        mkdir -v "$2" 2>/dev/null ; lzop -d  "$1" -p "$2"  ;;
            *.gz)                         gunzip "$1"                                        ;;
            *.bz2)                        bunzip2 "$1"                                       ;;
            *.Z)                          uncompress "$1"                                    ;;
            *.xz|*.txz|*.lzma|*.tlz)      xz -d "$1"                                         ;;
            *)
        esac
    else
        echo "Sorry, '$1' could not be decompressed."
        echo "Usage: extract <archive> <destination>"
        echo "Example: extract PKGBUILD.tar.bz2 ."
        echo "Valid archive types are:"
        echo "tar.bz2, tar.gz, tar.xz, tar, bz2,"
        echo "gz, tbz2, tbz, tgz, lzo,"
        echo "rar, zip, 7z, xz and lzma"
    fi
}

# compress a file or folder
function compress() {
        case "$1" in
        tar.bz2|.tar.bz2) tar cvjf "${2%%/}.tar.bz2" "${2%%/}/" ;;
        tbz2|.tbz2)       tar cvjf "${2%%/}.tbz2" "${2%%/}/"    ;;
        tbz|.tbz)         tar cvjf "${2%%/}.tbz" "${2%%/}/"     ;;
        tar.xz)           tar cvJf "${2%%/}.tar.xz" "${2%%/}/"  ;;
        tar.gz|.tar.gz)   tar cvzf "${2%%/}.tar.gz" "${2%%/}/"  ;;
        tgz|.tgz)         tar cvjf "${2%%/}.tgz" "${2%%/}/"     ;;
        tar|.tar)         tar cvf  "${2%%/}.tar" "${2%%/}/"     ;;
        rar|.rar)         rar a "${2}.rar" "$2"                 ;;
        zip|.zip)         zip -r -9 "${2}.zip" "$2"             ;;
        7z|.7z)           7z a "${2}.7z" "$2"                   ;;
        lzo|.lzo)         lzop -v "$2"                          ;;
        gz|.gz)           gzip -r -v "$2"                       ;;
        bz2|.bz2)         bzip2 -v "$2"                         ;;
        xz|.xz)           xz -v "$2"                            ;;
        lzma|.lzma)       lzma -v "$2"                          ;;
        *)                echo "Compress a file or directory."
        echo "Usage:   compress <archive type> <filename>"
        echo "Example: ac tar.bz2 PKGBUILD"
        echo "Please specify archive type and source."
        echo "Valid archive types are:"
        echo "tar.bz2, tar.gz, tar.gz, tar, bz2, gz, tbz2, tbz,"
        echo "tgz, lzo, rar, zip, 7z, xz and lzma." ;;
    esac
}

# Find all git repositories in a path and run git pull
function git-repositories-pull() {
    if [ $# -eq 0 ]; then
        find . -type d -name ".git" -print0 | xargs -0 -n1 dirname | grep -v -e "\(/.cache/\|/.config/\)" | xargs -I repodir sh -c 'cd repodir ; printf "repodir ... " ; git pull'
    else
        find "$@" -type d -name ".git" -print0 | xargs -0 -n1 dirname | grep -v -e "\(/.cache/\|/.config/\)" | xargs -I repodir sh -c 'cd repodir ; printf "repodir ... " ; git pull'
    fi;
}

# Columns git show
function columns-git-show() {
    cdiff -s -w 0 "$1^" "$1"
}

# Opens the current directory in Sublime Text, otherwise opens the given location
function open-with-sublime-text() {
    if [ $# -eq 0 ]; then
        subl -a .;
    else
        subl -a "$@";
    fi;
}

# Opens the current directory in Atom, otherwise opens the given location
function open-with-atom() {
    if [ $# -eq 0 ]; then
        atom .;
    else
        atom "$@";
    fi;
}

# Opens the current directory in Vim, otherwise opens the given location
function open-with-vim() {
    if [ $# -eq 0 ]; then
        vim .;
    else
        vim "$@";
    fi;
}

# Passthru grep
function grep-passthru() {
    if [ -z "$2" ]; then
        egrep "$1|$"
    else
        egrep "$1|$" $2
    fi
}

# Highlight a match in given color
function highlight() {
    declare -A fg_color_map
    fg_color_map[black]=30
    fg_color_map[red]=31
    fg_color_map[green]=32
    fg_color_map[yellow]=33
    fg_color_map[blue]=34
    fg_color_map[magenta]=35
    fg_color_map[cyan]=36

    fg_c=$(echo -e "\e[1;${fg_color_map[$1]}m")
    c_rs=$'\e[0m'
    sed -u s"/$2/$fg_c\0$c_rs/g"
}

# Human readable path variable
function path() {
    LF=$(printf '\\\012_')
    LF=${LF%_}

    echo $PATH | sed 's/:/'"$LF"'/g'
}

# Recursively fix dir/file permissions on a given directory
function fix-dir-perm() {
    if [ -d $1 ]; then
        find $1 -type d -exec chmod 755 {} \;
        find $1 -type f -exec chmod 644 {} \;
    else
        echo "$1 is not a directory."
    fi
}

# Get an HTTP response header only
function curl-header() {
    curl -s -D - "${1}" -o /dev/null
}

# Send a purge query (Varnish)
function curl-purge() {
    curl -s -X PURGE "${1}" | grep "title" | sed "s_<\([^<>][^<>]*\)>\([^<>]*\)</\1>_$prefix\2_g" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

# Create a directory and "cd" into it
function mkdir-cd() {
    mkdir "${1}" && cd "${1}"
}

# Backup a file
function backup-file() {
    cp -r "$1"{,.bak};
    #cp $1 $1_`date +%H:%M:%S_%d-%m-%Y`
}

# Encrypt a file
function encrypt() {
    openssl des3 -in $* -out $*.secret
}

# Decrypt a file
function decrypt() {
    openssl des3 -d -in $* -out $*.plain
}

# Small calc function
function calc() {
    echo "scale=2;$@" | bc -l
}

# Shortcut calc function
function = () {
    # credit goes to arzzen/calc.plugin.zsh
    echo "scale=2;$@" | bc -l
}

# Notes tool
function note() {
    case $@ in
        "-s") subl ~/.note.md;;
        "-e") vim  ~/.note.md;;
          "") cat  ~/.note.md | less;;
           *) echo -e "$@\n" >> ~/.note.md
              echo -e "\033[0;37m\"$@\" \033[1;30madded to your notes.\033[0m\n";;
    esac
}

# Create a data URI from file
function datauri() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Smart JPG / PNG images resize
function smartresize() {
    if [ "$1" == "" ]
        then echo "Syntax : smartresize inputfile width outputdir"
    elif [ "$2" == "" ]
        then echo "Syntax : smartresize inputfile width outputdir"
    elif [ "$3" == "" ]
        then echo "Syntax : smartresize inputfile width outputdir"
    else
        mogrify -path "$3" -filter Triangle -define filter:support=2 -thumbnail "$2" -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB "$1"
    fi
}

# Generate a password using pwgen
function strong-password() {
    echo "Syntax : strong-password [-B] [-y] [-s] [length]"
    echo "        -B : Don't use characters that could be confused"
    echo "        -y : Include at least one special character in the password"
    echo "        -s : Generate  completely  random, hard-to-memorize passwords"
    echo "    length : Password length"
    echo ""
    pwgen "$@"
}

# Download all files of a certain type with wget #
# usage: wgetall mp3 http://example.com/download/
function wgetall() {
    wget -r -l2 -nd -Nc -A.$@ $@ ;
}

# Matrix
function matrix() {
    echo -e "\e[1;40m" ; clear ; characters=$( jot -c 94 33 | tr -d '\n' ) ; while :; do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) $characters ;sleep 0.05; done|gawk '{ letters=$5; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}



# BASHRC
export DOTFILES_PATH=~/.dotfiles/public
export BIN_PATH=${BIN_PATH:-~/bin}

eval "`dircolors`"
shopt -s autocd                  # A command name that is the name of a directory is executed as if it were the argument to the cd command
shopt -s dirspell                # Bash attempts spelling correction on directory names during word completion if the directory name initially supplied does not exist.
shopt -s nocaseglob              # Bash matches filenames in a case-insensitive fashion when performing filename expansion.
shopt -s cdspell                 # Correct cd typos
shopt -s histappend              # Append History instead of overwriting file
shopt -s cmdhist                 # Bash attempts to save all lines of a multiple-line command in the same history entry
shopt -s extglob                 # Extended pattern
shopt -s no_empty_cmd_completion # No empty completion

BLACK="\[\e[30m\]"
RED="\[\e[31m\]"
GREEN="\[\e[32m\]"
YELLOW="\[\e[33m\]"
BLUE="\[\e[34m\]"
MAGENTA="\[\e[35m\]"
CYAN="\[\e[36m\]"
WHITE="\[\e[97m\]"
NONE="\[\e[0m\]"
RESET="\033[m"


export HISTFILE="$HOME/.cache/bash_history"
export LESSHISTFILE=-
export MYSQL_HISTFILE=/dev/null

# Fix bspwm java apps handling
export _JAVA_AWT_WM_NONREPARENTING=1

export PS1="[${WHITE}\u${NONE}@${RED}\h${NONE} ${CYAN}\w${NONE}]\\$\[${RESET}\] "
export VISUAL='vim'
export EDITOR='vim'

export VIMINIT="let \$MYVIMRC='$SSHHOME/.sshrc.d/.vimrc' | source \$MYVIMRC"
