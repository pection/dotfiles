#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

PADDING="   "
COLOR_FOCUS=$(xrdb -query | grep scrollColor | cut -f2 | head -1)
COLOR_BG=$(xrdb -query | grep background | cut -f2 | head -1)
COLOR_FG=$(xrdb -query | grep foreground | cut -f2 | head -1)
COLOR_RED=$(xrdb -query | grep color1 | cut -f2 | head -1)
COLOR_LGREY=$(xrdb -query | grep color7 | cut -f2 | head -1)

source "${DIR}/scripts/functions.sh"
source "${DIR}/scripts/bspc-subscribe-parser.sh"
source "${DIR}/scripts/bspc-nodes.sh"

bspcSubscribe=""
monitorsCount="1"
declare -a monitorsContent
declare -a titlesContent

while read -r line ; do
    case $line in
        W*)
            bspcSubscribe="$line"
            monitorsCount=$(countMonitors "$line")
            focusedMonitor=$(getFocusedMonitor "$line")
            for ((monitorIndex=0 ; monitorIndex<=(${monitorsCount}-1) ; monitorIndex++ )); do
                monitorState=$(getMonitorState "$monitorIndex" "$line")
                monitorName=$(getMonitorName "$monitorState")
                desktops=$(getDesktops "$monitorState")
                activeDesktop=$(getActiveDesktop "$monitorState")
                layout=$(getDesktopLayout "$activeDesktop" "$monitorState")
                # activeWindowState=$(getDesktopActiveWindowState "$activeDesktop" "$monitorState")
                # activeWindowFlags=$(getDesktopActiveWindowFlags "$activeDesktop" "$monitorState")

                workspaces=""
                for desktop in $desktops; do
                    FG=$COLOR_FG
                    if [ "$desktop" = "$activeDesktop" ]; then
                        BG=$COLOR_FOCUS
                    else
                        BG=$COLOR_BG
                    fi
                    workspace="${PADDING}${desktop}${PADDING}"
                    workspace="%{A:bspc desktop -f ${desktop}:}${workspace}%{A}"
                    workspace="%{A3:bspc node -d ${desktop}:}${workspace}%{A}"
                    workspace="%{F${FG}}%{B${BG}}${workspace}%{B-}%{F-}"

                    workspaces="${workspaces}${workspace}"
                done

                monitorIcon=$([[ "$layout" = "monocle" ]] && echo "" || echo "")
                monitorIsActive=$([[ "$focusedMonitor" = "$monitorName" ]] && echo "+" || echo "-")

                monitor="${PADDING}${monitorIcon}${PADDING}"
                monitor="%{A:bspc monitor -f ${monitorName}:}${monitor}%{A}"
                monitor="%{A3:rofi -show drun:}${monitor}%{A}"
                monitor="%{A4:systray run:}${monitor}%{A}"
                monitor="%{A5:systray stop:}${monitor}%{A}"
                monitor="%{${monitorIsActive}u}${monitor}%{-u}"

                monitorsContent["$monitorIndex"]="${monitor}${workspaces}"
            done
            ;;
        C*)
            clock="%{A:switch-or-run \"popup-calendar.URxvt\" popup-calendar:}${PADDING} ${line#?}${PADDING}%{A}" ;;
        L*)
            load="%{A:urxvt -name htop -e htop:}${PADDING} ${line#?}${PADDING}%{A}" ;;
        T*)
            focusedNode=$(getFocusedNodeId)
            for ((monitorIndex=0 ; monitorIndex<=(${monitorsCount}-1) ; monitorIndex++ )); do
                monitorState=$(getMonitorState "$monitorIndex" "$bspcSubscribe")
                monitorName=$(getMonitorName "$monitorState")
                nodes=$(getMonitorNodesIds "$monitorName")

                result=""
                pad=15
                for node in $nodes; do
                    class="$(getNodePrimaryClass "${node}")"
                    current="${PADDING}$(stringPad "$class" $pad)${PADDING}"
                    current="%{A:bspc node ${node} -g hidden=off -f:}${current}%{A}"
                    current="%{A2:bspc node ${node} -c:}${current}%{A}"
                    current="%{A3:bspc node ${node} -g hidden=on:}${current}%{A}"
                    if [ "$node" = "$focusedNode" ]; then
                        result="${result}%{+u}${current}%{-u}"
                    else
                        result="${result}${current}"
                    fi
                done

                titlesContent["$monitorIndex"]="$result"
            done
            # title="%{A:rofi -show window:}${PADDING}${line#?}${PADDING}%{A}"
            ;;
        E*)
            email="%{A:switch-or-run \"([A-Za-z0-9]*)\.Thunderbird\" thunderbird:} ${line#?}${PADDING}%{A}" ;;
        P*)
            if [ "${line#?}" != "0" ]; then
                placeholder="%{O${line#?}}"
            else
                placeholder=""
            fi
            ;;
    esac

    content=""
    for ((monitorIndex=0 ; monitorIndex<=(${monitorsCount}-1) ; monitorIndex++ )); do
        content="${content}%{S${monitorIndex}}"
        content="${content}%{l}${monitorsContent[$monitorIndex]}"
        content="${content}%{c}${titlesContent[$monitorIndex]}"
        content="${content}%{r}${email}${load}${clock}${placeholder}"
    done

    # >&2 echo -e "\n\n\n${content}"
    echo "${content}"

    sleep 0.05
done
